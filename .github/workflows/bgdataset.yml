name: Extract Bangumi Waifu

permissions:
  contents: write

on:
  #  push:
  workflow_dispatch:
    inputs:
      name:
        description: 'Character Name'
        type: string
        required: true
      bangumi_repository:
        description: 'Bangumi Repository'
        type: string
        required: true
      ch_id:
        description: 'Character IDs (Seperated with ,)'
        type: string
        required: true
      display_name:
        description: 'Display Name'
        type: string
        default: ''
      limit:
        description: 'Limit of Dataset Size'
        type: int
        default: '1000'
      repository:
        description: 'Repository to Publish To'
        type: str
        default: ''
      no_ccip:
        description: 'No CCIP for Dataset'
        type: boolean
        default: false

jobs:
  bangumibase_extract:
    name: Run Script
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - 'ubuntu-latest'
        python-version:
          - '3.8'

    steps:
      - name: Get system version for Linux
        if: ${{ contains(matrix.os, 'ubuntu') }}
        shell: bash
        run: |
          echo "OS_NAME=Linux" >> $GITHUB_ENV
          echo "IS_WIN=" >> $GITHUB_ENV
          echo "IS_MAC=" >> $GITHUB_ENV
      - name: Set environment for Cpython
        if: ${{ !contains(matrix.python-version, 'pypy') }}
        shell: bash
        run: |
          echo "IS_PYPY=" >> $GITHUB_ENV
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 20
          submodules: 'recursive'
      - name: Set up system dependencies on Linux
        if: ${{ env.OS_NAME == 'Linux' }}
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y tree cloc wget curl make zip
      - name: Set up python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade flake8 setuptools wheel twine
          pip install -r requirements.txt
      - name: Test the basic environment
        shell: bash
        run: |
          python -V
          pip --version
          pip list
          tree .
      - name: No CCIP for Dataset
        if: ${{ github.event.inputs.no_ccip == 'true' }}
        shell: bash
        run: |
          echo 'CH_P_NO_CCIP=--no_ccip' >> $GITHUB_ENV
      - name: Use CCIP
        if: ${{ github.event.inputs.no_ccip == 'false' }}
        shell: bash
        run: |
          echo 'CH_P_NO_CCIP=' >> $GITHUB_ENV
      - name: Set Repository
        if: ${{ github.event.inputs.repository != '' }}
        shell: bash
        run: |
          echo 'CH_P_REPO=--repository ${{ github.event.inputs.repository }}' >> $GITHUB_ENV
      - name: Use Default Repository
        if: ${{ github.event.inputs.repository == '' }}
        shell: bash
        run: |
          echo 'CH_P_REPO=' >> $GITHUB_ENV
      - name: Set Limit for Dataset
        if: ${{ github.event.inputs.limit != '' }}
        shell: bash
        run: |
          echo 'CH_P_LIMIT=--limit ${{ github.event.inputs.limit }}' >> $GITHUB_ENV
      - name: No Limit for Dataset
        if: ${{ github.event.inputs.limit == '' }}
        shell: bash
        run: |
          echo 'CH_P_LIMIT=' >> $GITHUB_ENV
      - name: Set Display Name
        if: ${{ github.event.inputs.display_name != '' }}
        shell: bash
        run: |
          echo 'CH_P_DISPLAY_NAME=--display_name "${{ github.event.inputs.display_name }}"' >> $GITHUB_ENV
      - name: No Display Name
        if: ${{ github.event.inputs.display_name == '' }}
        shell: bash
        run: |
          echo 'CH_P_DISPLAY_NAME=' >> $GITHUB_ENV
      - name: Run Crawler
        shell: bash
        env:
          CI: 'true'
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          CH_SAFE: '1'
        run: |
          python -m cyberharem.dataset.video extract \
            --source_repository ${{ github.event.inputs.bangumi_repository }} \
            --name "${{ github.event.inputs.name }}" \
            --ch_id ${{ github.event.inputs.ch_id }} \
            ${{ env.CH_P_LIMIT }} ${{ env.CH_P_REPO }} ${{ env.CH_P_NO_CCIP }} ${{ env.CH_P_DISPLAY_NAME }}
